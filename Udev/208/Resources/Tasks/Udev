#!/bin/bash

source GoboPath

cmd="$1"
[ "$cmd" ] || cmd=Start

case "$cmd" in

[Ss]tart)

   mountpoint -q "$goboStatus" || mount -t proc none "$goboStatus"
   mountpoint -q "$goboDevices" || mount -t devtmpfs none "$goboDevices"
   mkdir -p "$goboDevices/pts" "$goboDevices/shm" "$goboVariable/run/udev"
   mountpoint -q "$goboDevices/pts" || mount -t devpts devpts "$goboDevices/pts"

   # Udev handles uevents itself, so we don't need to have
   # the kernel call out to any binary in response to them
   echo "" > "$goboStatus/sys/kernel/hotplug"

   # Start the udev daemon to continually watch for, and act on,
   # uevents
   if [ -e /lib/udev/udevd ]
   then /lib/udev/udevd --daemon
   elif [ -e /sbin/udevd ]
   then /sbin/udevd --daemon
   fi

   # Now traverse /sys in order to "coldplug" devices that have
   # already been discovered
   /sbin/udevadm trigger --action=add    --type=subsystems
   /sbin/udevadm trigger --action=add    --type=devices
   /sbin/udevadm trigger --action=change --type=devices
   /sbin/udevadm trigger

   # Wait for events to finish
   /sbin/udevadm settle --timeout=10
   
   # Create persistent network device name mappings
   if [ "$HOSTNAME" = "LiveCD" ]
   then
      sh ${goboLibraries}/udev/init-net-rules.sh > /dev/null
      grep DRIVER /sys/class/net/*/device/uevent | cut -d= -f2 | while read driver; do rmmod $driver; done
      /sbin/udevadm control --reload
      /sbin/udevadm trigger
      /sbin/udevadm settle --timeout=10
   fi
 
   # If any LVM based partitions are on the system, ensure they
   # are activated so they can be used.
   [ -x /sbin/vgchange ] && /sbin/vgchange -a y >& /dev/null

   ;;
   
[Ss]top)

   killall udevd

   ;;
   
[Rr]estart)

   $0 stop
   sleep 1
   $0 start

   ;;

esac
