From 16cfa528d9867470af194fb8588ac69983d2dce2 Mon Sep 17 00:00:00 2001
From: Hisham Muhammad <hisham@gobolinux.org>
Date: Tue, 28 Apr 2020 21:01:42 -0300
Subject: [PATCH] Add mouse support

---
 src/ui/tab.cpp | 351 +++++++++++++++++++++++++++++++++++++++++--------
 src/ui/tab.hpp |  38 ++++++
 src/ui/ui.cpp  |  57 ++++++++
 3 files changed, 388 insertions(+), 58 deletions(-)

diff --git a/src/ui/tab.cpp b/src/ui/tab.cpp
index 61e1fe3..b74e249 100644
--- a/src/ui/tab.cpp
+++ b/src/ui/tab.cpp
@@ -1,7 +1,7 @@
 #include "tab.hpp"
 
-#include <menu.h>
 #include <ncurses.h>
+#include <menu.h>
 
 #include <algorithm>
 #include <cstring>
@@ -13,14 +13,8 @@
 #include "config.hpp"
 #include "ui.hpp"
 
-void Tab::draw()
+int Tab::getBlockSize()
 {
-    if (object == nullptr) {
-        return;
-    }
-
-    int baseY = 0;
-    int current_block = 0;
     int BLOCK_SIZE = 5;
 
     if (has_volume) {
@@ -33,6 +27,19 @@ void Tab::draw()
         }
     }
 
+    return BLOCK_SIZE;
+}
+
+void Tab::draw()
+{
+    if (object == nullptr) {
+        return;
+    }
+
+    int baseY = 0;
+    int current_block = 0;
+    int BLOCK_SIZE = getBlockSize();
+
     total_blocks = (ui.height - 2) / BLOCK_SIZE;
     int blocks_drawn = 0;
 
@@ -240,18 +247,6 @@ void Tab::handleEvents(const char *event)
         return;
     }
 
-    int BLOCK_SIZE = 5;
-
-    if (has_volume) {
-        if (ui.hide_top) {
-            BLOCK_SIZE -= 1;
-        }
-
-        if (ui.hide_bottom) {
-            BLOCK_SIZE -= 1;
-        }
-    }
-
     auto pai = object->find(selected_index);
 
     PaObject *selected_pobj = nullptr;
@@ -377,58 +372,245 @@ void Tab::handleEvents(const char *event)
             }
         }
     } else if (!strcmp("dropdown", event)) {
-        uint32_t selected = 0;
+        handleDropDown(selected_pobj);
+    }
+}
 
+void Tab::handleMouse(int x, int y, int button)
+{
+    if (object == nullptr) {
+        return;
+    }
 
-        if (selected_pobj != nullptr && toggle != nullptr) {
-            selected = dropDown(
-                           -1,
-                           std::min(
-                               selected_block * (BLOCK_SIZE),
-                               (total_blocks - 1) * BLOCK_SIZE
-                           ),
-                           *toggle,
-                           selected_pobj->getRelation()
-                       );
-
-            if (selected != static_cast<uint32_t>(-1)) {
-                selected_pobj->move(selected);
+    int baseY = 0;
+    int current_block = 0;
+    int BLOCK_SIZE = getBlockSize();
+
+    total_blocks = (ui.height - 2) / BLOCK_SIZE;
+    int blocks_drawn = 0;
+
+    bool more_up = false;
+    bool more_down = false;
+
+    for (auto &i : *object) {
+        auto item = i.second;
+        if (current_block <= selected_block - total_blocks) {
+            current_block++;
+            more_up = true;
+            continue;
+        }
+
+        if (blocks_drawn >= total_blocks) {
+            more_down = true;
+            break;
+        }
+
+        blocks_drawn++;
+
+        if (has_volume) {
+            if (handleMouseVolumeBar(item, x, y, ui.width, ui.height, 0, baseY + 3)) {
+                return;
             }
-        } else if (selected_pobj != nullptr) {
-            uint32_t w = 0;
-            int x = 0;
+        } else { // Configuration
+            if (item->active_attribute != nullptr) {
+                if (handleMouseDropDown(item, x, y, ui.width - 2, 2, 1, baseY + 2)) {
+                    return;
+                }
+            }
+        }
 
-            int y = std::min(
-                        selected_block * (BLOCK_SIZE),
-                        (total_blocks - 1) * BLOCK_SIZE
-                    );
+        int toggle_len = 0;
+        int item_len = 0;
+        unsigned int len = 0;
+        unsigned int sink_pos = 0;
+        PaObject* toggle_item = nullptr;
+
+        if (toggle != nullptr) {
+            auto rel = toggle->find(i.second->getRelation());
 
+            if (rel != toggle->end()) {
+                char *name = rel->second->name;
 
-            if (has_volume) {
-                x = -1;
-            } else {
-                x = 1;
-                w = ui.width - 3;
-                y += 2;
+                if (name != nullptr) {
+                    len = strlen(name);
+                    sink_pos = ui.width - 1 - len;
+                    item_len = strlen(name);
+                    toggle_item = rel->second;
+                }
+            }
+        } else {
+            if (i.second->active_attribute != nullptr && has_volume) {
+                len = strlen(i.second->active_attribute->description);
+                sink_pos = ui.width - 1 - len;
+                item_len = strlen(i.second->active_attribute->description);
+                toggle_item = i.second;
             }
+        }
 
-            selected = dropDown(
-                           x,
-                           y,
-                           selected_pobj->attributes,
-                           selected_pobj->getRelation(),
-                           w
-                       );
+        if (toggle_item != nullptr) {
+            auto save_selected_index = selected_index;
+            auto save_selected_block = selected_block;
 
-            if (selected != static_cast<uint32_t>(-1)) {
-                selected_pobj->set_active_attribute(
-                    selected_pobj->attributes[selected]->name
-                );
+            selected_index = i.first;
+            selected_block = current_block;
+
+            bool done = handleMouseDropDown(toggle_item, x, y, len, 1, sink_pos, baseY + 1);
+
+            selected_index = save_selected_index;
+            selected_block = save_selected_block;
+
+            if (done) {
+                return;
             }
+
+            toggle_len += item_len;
+        }
+
+        baseY += BLOCK_SIZE;
+        current_block++;
+    }
+
+    if (more_up) {
+        if (handleMouseMoreUp(x, y, 4, 1, (ui.width / 2) - 4, 0)) {
+            return;
+        }
+    }
+
+    if (more_down) {
+        if (handleMouseMoreDown(x, y, 4, 1, (ui.width / 2) - 4, ui.height - 2)) {
+            return;
         }
     }
 }
 
+void Tab::handleDropDown(PaObject* selected_pobj)
+{
+    uint32_t selected = 0;
+
+    int BLOCK_SIZE = getBlockSize();
+
+    if (selected_pobj != nullptr && toggle != nullptr) {
+        selected = dropDown(
+                       -1,
+                       std::min(
+                           selected_block * (BLOCK_SIZE),
+                           (total_blocks - 1) * BLOCK_SIZE
+                       ),
+                       *toggle,
+                       selected_pobj->getRelation()
+                   );
+
+        if (selected != static_cast<uint32_t>(-1)) {
+            selected_pobj->move(selected);
+        }
+    } else if (selected_pobj != nullptr) {
+        uint32_t w = 0;
+        int x = 0;
+
+        int y = std::min(
+                    selected_block * (BLOCK_SIZE),
+                    (total_blocks - 1) * BLOCK_SIZE
+                );
+
+
+        if (has_volume) {
+            x = -1;
+        } else {
+            x = 1;
+            w = ui.width - 3;
+            y += 2;
+        }
+
+        selected = dropDown(
+                       x,
+                       y,
+                       selected_pobj->attributes,
+                       selected_pobj->getRelation(),
+                       w
+                   );
+
+        if (selected != static_cast<uint32_t>(-1)) {
+            selected_pobj->set_active_attribute(
+                selected_pobj->attributes[selected]->name
+            );
+        }
+    }
+}
+
+bool Tab::handleMouseVolumeBar(
+    PaObject* item,
+    int mousex,
+    int mousey,
+    int w,
+    int h,
+    int x,
+    int y
+)
+{
+    if (mousex < x || mousex >= x + w || mousey < (y - 1) || mousey >= y + 2) {
+        return false;
+    }
+
+    item->set_volume(((mousex - x + 1) / (float)(w - x)) * 1.5f);
+
+    return true;
+}
+
+bool Tab::handleMouseDropDown(
+    PaObject* item,
+    int mousex,
+    int mousey,
+    int w,
+    int h,
+    int x,
+    int y
+)
+{
+    if (mousex < x || mousex >= x + w || mousey < y || mousey >= y + 3) {
+        return false;
+    }
+
+    handleDropDown(item);
+
+    return true;
+}
+
+bool Tab::handleMouseMoreUp(
+    int mousex,
+    int mousey,
+    int w,
+    int h,
+    int x,
+    int y
+)
+{
+    if (mousex < x || mousex >= x + w || mousey < y || mousey > y) {
+        return false;
+    }
+
+    handleEvents("move_up");
+
+    return true;
+}
+
+bool Tab::handleMouseMoreDown(
+    int mousex,
+    int mousey,
+    int w,
+    int h,
+    int x,
+    int y
+)
+{
+    if (mousex < x || mousex >= x + w || mousey < y || mousey > y) {
+        return false;
+    }
+
+    handleEvents("move_down");
+
+    return true;
+}
+
 uint32_t Tab::dropDown(
     int x,
     int y,
@@ -579,6 +761,59 @@ uint32_t Tab::dropDown(
             continue;
         }
 
+#ifdef KEY_MOUSE
+        if (input == KEY_MOUSE) {
+            MEVENT mevent;
+            int ok;
+
+            ok = getmouse(&mevent);
+            if (ok != OK) {
+                continue;
+            }
+
+            if (mevent.bstate & BUTTON1_PRESSED) {
+                if (mevent.y < y || mevent.y > y + (int)height + 1 ||
+                    mevent.x < x || mevent.x > x + (int)width + 1) {
+                    clrtoeol();
+
+                    ITEM *item = current_item(menu);
+                    selected = static_cast<std::pair<uint32_t, std::string>*>(
+                                   item->userptr
+                               )->first;
+
+                    selecting = false;
+                    continue;
+                }
+            }
+
+            if (mevent.y == y || mevent.y == y + (int)height + 1 ||
+                mevent.x == x || mevent.x == x + (int)width + 1) {
+                continue;
+            }
+
+            if (mevent.bstate & BUTTON1_PRESSED) {
+                int top = top_row(menu);
+                int idx = mevent.y - y - 1 + top;
+                ITEM** its = menu_items(menu);
+                int itc = item_count(menu);
+                if (idx < itc) {
+                    ITEM* item = its[idx];
+                    set_current_item(menu, item);
+                    selected = static_cast<std::pair<uint32_t, std::string>*>(
+                                   item->userptr
+                               )->first;
+                }
+
+                selecting = false;
+                continue;
+            } else if (mevent.bstate & BUTTON4_PRESSED) {
+                menu_driver(menu, REQ_UP_ITEM);
+            } else if (mevent.bstate & BUTTON5_PRESSED) {
+                menu_driver(menu, REQ_DOWN_ITEM);
+            }
+        }
+#endif
+
         if (input == KEY_RESIZE) {
             selecting = false;
             continue;
diff --git a/src/ui/tab.hpp b/src/ui/tab.hpp
index 09f63df..76df59f 100644
--- a/src/ui/tab.hpp
+++ b/src/ui/tab.hpp
@@ -29,6 +29,7 @@ class Tab
 
     virtual void draw();
     void handleEvents(const char *event);
+    void handleMouse(int x, int y, int button);
 
     static void borderBox(int w, int h, int px, int py);
     static void selectBox(int w, int px, int py, bool selected);
@@ -77,6 +78,43 @@ class Tab
     static unsigned int getVolumeColor(int p);
     static unsigned int getBarColor(int p);
 
+    int getBlockSize();
+    bool handleMouseVolumeBar(
+        PaObject* item,
+        int mousex,
+        int mousey,
+        int w,
+        int h,
+        int x,
+        int y
+    );
+    bool handleMouseDropDown(
+        PaObject* item,
+        int mousex,
+        int mousey,
+        int w,
+        int h,
+        int x,
+        int y
+    );
+    bool handleMouseMoreUp(
+        int mousex,
+        int mousey,
+        int w,
+        int h,
+        int x,
+        int y
+    );
+    bool handleMouseMoreDown(
+        int mousex,
+        int mousey,
+        int w,
+        int h,
+        int x,
+        int y
+    );
+    void handleDropDown(PaObject* selected_pobj);
+
     int selected_block;
     int total_blocks;
 };
diff --git a/src/ui/ui.cpp b/src/ui/ui.cpp
index 1bae4da..f2d0281 100644
--- a/src/ui/ui.cpp
+++ b/src/ui/ui.cpp
@@ -232,6 +232,15 @@ void Ui::handleInput()
 {
     set_escdelay(0);
 
+#ifdef KEY_MOUSE
+    mouseinterval(0);
+#if NCURSES_MOUSE_VERSION > 1
+    mousemask(BUTTON1_PRESSED | BUTTON4_PRESSED | BUTTON5_PRESSED, NULL);
+#else
+    mousemask(BUTTON1_PRESSED, NULL);
+#endif
+#endif
+
     int input = wgetch(window);
     const char *event = nullptr;
 
@@ -240,6 +249,54 @@ void Ui::handleInput()
     }
 
     switch (input) {
+#ifdef KEY_MOUSE
+        case KEY_MOUSE: {
+            MEVENT mevent;
+            int ok;
+
+            ok = getmouse(&mevent);
+            if (ok != OK) {
+                return;
+            }
+            if (mevent.y == height - 1) {
+                if (mevent.bstate & BUTTON1_PRESSED) {
+                    int x = 0;
+                    for (int i = 0; i < NUM_TABS; i++) {
+                        int len = strlen(tabs[i]);
+                        if (mevent.x >= x && mevent.x < x + len) {
+                            switchTab(i);
+                            return;
+                        }
+                        x += len + 1;
+                    }
+//#if NCURSES_MOUSE_VERSION > 1
+                } else if (mevent.bstate & BUTTON4_PRESSED) {
+                    switchTab(++tab_index);
+                    return;
+                } else if (mevent.bstate & BUTTON5_PRESSED) {
+                    switchTab(--tab_index);
+                    return;
+//#endif
+                }
+            } else {
+                int button = 0;
+                if (mevent.bstate & BUTTON1_PRESSED) {
+                    button = 1;
+                }
+#if NCURSES_MOUSE_VERSION > 1
+                else if (mevent.bstate & BUTTON4_PRESSED) {
+                    button = 4;
+                } else if (mevent.bstate & BUTTON5_PRESSED) {
+                    button = 5;
+                }
+#endif
+
+                current_tab->handleMouse(mevent.x, mevent.y, button);
+            }
+
+            return;
+        }
+#endif
         case KEY_RESIZE:
             getmaxyx(stdscr, height, width);
             wresize(window, height - 1, width);
