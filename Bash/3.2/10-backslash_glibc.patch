Bash-Release: 3.2
Patch-ID: bash32-010

Bug-Reported-by:    Ryan Waldron <rew@erebor.com>
Bug-Reference-ID:   <20070119065603.546D011E9C@kansas.erebor.com>
Bug-Reference-URL:  http://lists.gnu.org/archive/html/bug-bash/2007-01/msg00059.html

Bug-Description:

The glibc implementation of regcomp/regexec does not allow backslashes to
escape "ordinary" pattern characters when matching.  Bash used backslashes
to quote all characters when the pattern argument to the [[ special
command's =~ operator was quoted.  This caused the match to fail on Linux
and other systems using GNU libc.

--- bash-3.2/pathexp.h	2005-02-19 23:23:18.000000000 +0100
+++ bash-3.2/pathexp.h.new	2007-04-01 04:53:47.000000000 +0200
@@ -32,6 +32,7 @@
 /* Flag values for quote_string_for_globbing */
 #define QGLOB_CVTNULL	0x01	/* convert QUOTED_NULL strings to '\0' */
 #define QGLOB_FILENAME	0x02	/* do correct quoting for matching filenames */
+#define QGLOB_REGEXP	0x04	/* quote an ERE for regcomp/regexec */
 
 #if defined (EXTENDED_GLOB)
 /* Flags to OR with other flag args to strmatch() to enabled the extended
--- bash-3.2/pathexp.c	2002-05-06 19:43:05.000000000 +0200
+++ bash-3.2/pathexp.c.new	2007-04-01 04:58:39.000000000 +0200
@@ -110,6 +110,33 @@
   return (0);
 }
 
+ /* Return 1 if C is a character that is special' in a POSIX ERE and needs to
+    be quoted to match itself. */
+ static inline int
+ ere_char (c)
+      int c;
+ {
+   switch (c)
+     {
+       case '.':
+       case '[':
+       case '\\':
+       case '(':
+       case ')':
+       case '*':
+       case '+':
+       case '?':
+       case '{':
+       case '|':
+       case '^':
+       case '$':
+         return 1;
+       default: 
+         return 0;
+     }
+    return (0);
+  }
+
 /* PATHNAME can contain characters prefixed by CTLESC; this indicates
    that the character is to be quoted.  We quote it here in the style
    that the glob library recognizes.  If flags includes QGLOB_CVTNULL,
@@ -142,6 +169,8 @@
 	{
 	  if ((qflags & QGLOB_FILENAME) && pathname[i+1] == '/')
 	    continue;
+	  if ((qflags & QGLOB_REGEXP) && ere_char (pathname[i+1]) == 0)
+	    continue;
 	  temp[j++] = '\\';
 	  i++;
 	  if (pathname[i] == '\0')
--- bash-3.2/subst.c	2007-04-01 03:41:06.000000000 +0200
+++ bash-3.2/subst.c.new	2007-04-01 05:03:41.000000000 +0200
@@ -2646,11 +2646,12 @@
 
 /* This needs better error handling. */
 /* Expand W for use as an argument to a unary or binary operator in a
-   [[...]] expression.  If SPECIAL is nonzero, this is the rhs argument
+   [[...]] expression.  If SPECIAL is 1, this is the rhs argument
    to the != or == operator, and should be treated as a pattern.  In
-   this case, we quote the string specially for the globbing code.  The
-   caller is responsible for removing the backslashes if the unquoted
-   words is needed later. */   
+   this case, we quote the string specially for the globbing code.  If
+   SPECIAL is 2, this is an rhs argument for the =~ operator, and should
+   be quoted appropriately for regcomp/regexec.  The caller is responsible
+   for removing the backslashes if the unquoted word is needed later. */
 char *
 cond_expand_word (w, special)
      WORD_DESC *w;
@@ -2658,6 +2659,7 @@
 {
   char *r, *p;
   WORD_LIST *l;
+  int qflags;
 
   if (w->word == 0 || w->word[0] == '\0')
     return ((char *)NULL);
@@ -2672,8 +2674,11 @@
 	}
       else
 	{
+	  qflags = QGLOB_CVTNULL;
+	  if (special == 2)
+	    qflags |= QGLOB_REGEXP;
 	  p = string_list (l);
-	  r = quote_string_for_globbing (p, QGLOB_CVTNULL);
+	  r = quote_string_for_globbing (p, qflags);
 	  free (p);
 	}
       dispose_words (l);
--- bash-3.2/execute_cmd.c	2006-08-26 06:23:17.000000000 +0200
+++ bash-3.2/execute_cmd.c.new	2007-04-01 05:04:42.000000000 +0200
@@ -2546,7 +2546,7 @@
       arg1 = cond_expand_word (cond->left->op, 0);
       if (arg1 == 0)
 	arg1 = nullstr;
-      arg2 = cond_expand_word (cond->right->op, patmatch||rmatch);
+      arg2 = cond_expand_word (cond->right->op, rmatch ? 2 : (patmatch ? 1 : 0));
       if (arg2 == 0)
 	arg2 = nullstr;
 
