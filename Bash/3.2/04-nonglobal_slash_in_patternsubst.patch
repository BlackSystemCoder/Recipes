Bash-Release: 3.2
Patch-ID: bash32-004

Bug-Reported-by:    Stuart Shelton <srcshelton@gmail.com>
Bug-Reference-ID: <619141e40610261203y6cda5aa6i23cb24c7aeba996e@mail.gmail.com>
Bug-Reference-URL:                                           

Bug-Description:

A bug in the parameter pattern substitution implementation treated a pattern
whose first character was /' (after expansion) as specifying global replacement.

--- bash-3.2/subst.c	2006-09-19 14:35:09.000000000 +0200
+++ bash-3.2/subst.c.new	2007-04-01 03:41:06.000000000 +0200
@@ -5707,6 +5707,11 @@
   vtype &= ~VT_STARSUB;
 
   mflags = 0;
+  if (patsub && *patsub == '/')
+  {
+    mflags |= MATCH_GLOBREP;
+    patsub++;
+  }
 
   /* Malloc this because expand_string_if_necessary or one of the expansion
      functions in its call chain may free it on a substitution error. */
@@ -5741,13 +5746,12 @@
     }
 
   /* ksh93 doesn't allow the match specifier to be a part of the expanded
-     pattern.  This is an extension. */
+     pattern.  This is an extension. Make sure we don't anchor the pattern
+     at the beginning or end of the string if we're doing global replacement,
+     though. */
   p = pat;
-  if (pat && pat[0] == '/')
-    {
-      mflags |= MATCH_GLOBREP|MATCH_ANY;
-      p++;
-    }
+  if (mflags & MATCH_GLOBREP)
+    mflags |= MATCH_ANY;
   else if (pat && pat[0] == '#')
     {
       mflags |= MATCH_BEG;
--- bash-3.2/tests/new-exp.right	2007-04-01 03:43:32.000000000 +0200
+++ bash-3.2/tests/new-exp.right.new	2007-04-01 03:44:03.000000000 +0200
@@ -430,7 +430,7 @@
 Case06---1---A B C::---
 Case07---3---A:B:C---
 Case08---3---A:B:C---
-./new-exp.tests: line 506: /${$(($#-1))}: bad substitution
+./new-exp.tests: line 506: ${$(($#-1))}: bad substitution
 argv[1] = <a>
 argv[2] = <b>
 argv[3] = <c>
